*** a/contrib/pgbench/pgbench.c
--- b/contrib/pgbench/pgbench.c
***************
*** 125,130 **** int			fillfactor = 100;
--- 125,168 ----
  int			unlogged_tables = 0;
  
  /*
+  * do not close client if query error is encountered
+  */
+ int			proceed_on_error = 0;
+ 
+ /*
+  * start second for per-second rate reporting
+  */
+ uint64			persecondstart;
+ 
+ /*
+  * number of seconds to keep tally
+  *
+  */
+ #define PERSECOND_NUMSECONDS	604800
+ 
+ /*
+  * per-second report table
+  * persecond[threadnum][second]
+  */
+ int			**persecond;
+ 
+ /*
+  * size of transaction batches to report on per second
+  *
+  */
+ int			persecondbatchsize;
+ 
+ /*
+  * per thread per second completed transactions tally
+  */
+ int			*persecondtally;
+ 
+ /*
+  * use /dev/urandom for random seed state
+  */
+ int			use_urandom = 0;
+ 
+ /*
   * tablespace selection
   */
  char	   *tablespace = NULL;
***************
*** 150,155 **** char	   *pgoptions = NULL;
--- 188,194 ----
  char	   *pgtty = NULL;
  char	   *login = NULL;
  char	   *dbName;
+ char	   *password;
  
  volatile bool timer_exceeded = false;	/* flag from signal handler */
  
***************
*** 361,366 **** usage(const char *progname)
--- 400,406 ----
  		   "  -D VARNAME=VALUE\n"
  		   "               define variable for use by custom script\n"
  		   "  -f FILENAME  read transaction script from FILENAME\n"
+ 		   "  -I           do not abort connection if query error is encountered\n"
  		   "  -j NUM       number of threads (default: 1)\n"
  		   "  -l           write transaction times to log file\n"
  		   "  -M simple|extended|prepared\n"
***************
*** 373,383 **** usage(const char *progname)
--- 413,433 ----
  	 "  -t NUM       number of transactions each client runs (default: 10)\n"
  		   "  -T NUM       duration of benchmark test in seconds\n"
  		   "  -v           vacuum all four standard tables before tests\n"
+ 		   "  --per-second=NUM\n"
+ 		   "               report per second throughput rate per thread. NUM is the # of\n"
+ 		   "               statements in each batch to be added to the per second tally.\n"
+ 		   "               As NUM increases, the sampling rate to get the current\n"
+ 		   "               time decreases.\n"
+ 
+ 		   "               Note that one tally is made per statement in a multi-statement\n"
+ 		   "               transaction, including BEGIN and COMMIT.\n"
+ 		   "  --urandom    use /dev/urandom for seeding random number generator\n"
  		   "\nCommon options:\n"
  		   "  -d             print debugging output\n"
  		   "  -h HOSTNAME    database server host or socket directory\n"
  		   "  -p PORT        database server port number\n"
  		   "  -U USERNAME    connect as specified database user\n"
+ 		   "  -P PASSWORD    send specified password\n"
  		   "  -V, --version  output version information, then exit\n"
  		   "  -?, --help     show this help, then exit\n"
  		   "\n"
***************
*** 421,427 **** static PGconn *
  doConnect(void)
  {
  	PGconn	   *conn;
- 	static char *password = NULL;
  	bool		new_pass;
  
  	/*
--- 471,476 ----
